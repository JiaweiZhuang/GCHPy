J.W.Zhuang 2016/12

This package is for
(1] generating Tempest offline regridding weights for Lat-Lon <-> Cube-Sphere remapping
(2) use the regridding weights to regrid data online in python
(3) use the regridding weights to generate GMAO tilefiles (TBD) 

0. Clone the core Tempest code:
$git clone https://github.com/JiaweiZhuang/Tempest_for_GCHP.git tempestremap
(use a separate repo to better control its complicated source code)

1. generating Tempest offline regridding weights

1.1. compile tempest

$source GCHP.ifort13_openmpi_odyssey.bashrc  
$cd tempestremap
$make clean
$make all

1.2. run tempest
check the parameters in runTempest.sh
$./runTempest.sh

the offline regridding weights will be in offline_MAP/

The files already existing in offline_MAP/ are generated by first running with the default parameters, and then running with 'isGMAO=false'

2. online regridding using python
With the offline weights generated in the previous step, now you can use these weights to perform C2L or L2C regridding.

There are some examples in python_scripts/, just run them by, for example
$python example1_GMAO.py

example1 is to ensure that Tempest regridding gives the same result as original GMAO tilefiles

The core module is tempest_remap.py, which reads the offline weights, rearrange the indices, and initialize the regridding routines.
The regridding can be done as eaisly as (in python):
import tempest_remap
c2l = tempest_remap.C2L(â€œc48-to-lon72_lat46_MAP_DEPE_GMAO.nc",72,46,48)
LLdata = c2l.regrid(CSdata) 

where c48-to-lon72_lat46_MAP_DEPE_GMAO.nc is generated by Tempest, and CSdata is an array of size (6,48,48)

3. create GMAO tilefiles(TBD)
The object tempest_remap.L2C or tempest_remap.C2L contains all the information needed by a GMAO tilefile. The only thing left is binary I/O.
See C2L.tilefile in python_scripts/tempest_remap.py
